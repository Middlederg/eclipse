@page "/"
@inject ShipAttack shipAttack

<PageTitle>Index</PageTitle>

<OverlayPanel @ref="overlayPanel">
    <Header>
        @if (selectedShip is not null)
        {
            <div>
                <span class="font-semibold uppercase tracking-wide">
                    @selectedShip.Name
                </span>

                <ShipRenderer Ship="selectedShip">

                </ShipRenderer>
            </div>
        }
    </Header>
    <Body>
        @if (selectedShip is not null)
        {
            <p>
                <strong class="text-xs">
                    Hull:
                </strong>

                @selectedShip.CurrentStrength / @selectedShip.TotalStrength

            </p>
            <p class="font-mono">
                <strong class="text-xs">
                    Hull:
                </strong>
                @selectedShip.CurrentStrength / @selectedShip.TotalStrength
            </p>
        }
    </Body>
</OverlayPanel>

<div class="p-10 rounded border-2 m-4">

    <div class="grid grid-cols-2">
        <div class="flex flex-col space-y-4 border-y-2">
            @foreach (var battleGroup in battle.Groups)
            {
                <div class="flex flex-col">
                    <div class="grid grid-cols-2">
                        <div class="flex items-center space-x-2">
                            @foreach (var ship in battleGroup.Ships)
                            {
                                <ShipRenderer Ship="ship" OnShipClicked="ShipClicked" />
                            }
                        </div>

                        <div class="flex justify-between space-x-2">

                            @if (battle.ActiveGroup.Equals(battleGroup))
                            {
                                <button type="button" class="@Styles.PrimaryInlineButton" @onclick="async () => await Shoot(battleGroup)">
                                    Shoot
                                </button>
                                <button type="button" class="@Styles.SecondaryInlineButton" @onclick="() => Retreat(battleGroup)">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24"
                                 stroke-width="1.5" stroke="currentColor" fill="none"
                                 stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M9 11l-4 4l4 4m-4 -4h11a4 4 0 0 0 0 -8h-1" />
                                    </svg>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="flex space-x-2 mt-2">
                        @foreach (var diceResult in results[battleGroup.Index])
                        {
                            <Dice DiceResult="diceResult" />
                        }
                    </div>
                </div>
            }

        </div>

        <div class="flex flex-col space-y-4">

            @foreach (var enemyGroup in battle.EnemyGroups)
            {
                <div class="grid grid-cols-2">
                    <div class="flex items-center space-x-2">
                        @foreach (var ship in enemyGroup.Ships)
                        {
                            <ShipRenderer Ship="ship" OnShipClicked="ShipClicked" />
                        }
                    </div>

                    <div class="flex space-x-2">
                        @foreach (var diceResult in enemyResults[enemyGroup.Index])
                        {
                            <Dice DiceResult="diceResult" />
                        }
                    </div>
                </div>


            }
        </div>
    </div>
</div>


<div class="p-10 m-4">
    @if (battle.IsEnded)
    {
        <div class="flex justify-between items-center">

            <div>
                Battle ended!
            </div>

            <div class="font-bold">
                Winner: @battle.GetWinner
            </div>
        </div>
    }
    else
    {
        <span>
            @message
        </span>
    }
</div>

@if (loading)
{
    <div class="p-10 m-4">
        LOADING
    </div>
}

<div class="p-10 grid grid-cols-7">


    <ShipRenderer Ship="PlantaShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="DescendantsOfDracoShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="HydranProgressShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="EridaniEmpireShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="MechanemaShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="OrionHegemonyShips.Interceptor"></ShipRenderer>
    <ShipRenderer Ship="TerranShips.Interceptor"></ShipRenderer>

</div>

<div class="p-10 grid grid-cols-7">


    <ShipRenderer Ship="PlantaShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="DescendantsOfDracoShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="HydranProgressShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="EridaniEmpireShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="MechanemaShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="OrionHegemonyShips.Cruiser"></ShipRenderer>
    <ShipRenderer Ship="TerranShips.Cruiser"></ShipRenderer>

</div>

<div class="p-10 grid grid-cols-7">


    <ShipRenderer Ship="PlantaShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="DescendantsOfDracoShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="HydranProgressShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="EridaniEmpireShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="MechanemaShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="OrionHegemonyShips.Dreadnought"></ShipRenderer>
    <ShipRenderer Ship="TerranShips.Dreadnought"></ShipRenderer>

</div>

@code {
    private Battle battle;
    private Ship selectedShip;

    private List<List<DiceResult>> results;
    private List<List<DiceResult>> enemyResults;

    private bool loading = false;
    private string message = "";

    private OverlayPanel overlayPanel;

    protected override void OnInitialized()
    {
        battle = new Battle(
             new List<Ship>() { TerranShips.Interceptor },
             new List<Ship>() { PlantaShips.Interceptor }
         );

        //battle = new Battle(
        //    new List<Ship>() { TerranShips.Interceptor, TerranShips.Interceptor, TerranShips.Cruiser },
        //    new List<Ship>() { PlantaShips.Interceptor, PlantaShips.Dreadnought, PlantaShips.Dreadnought }
        //);

        results = battle.Groups.Select(x => new List<DiceResult>()).ToList();
        enemyResults = battle.EnemyGroups.Select(x => new List<DiceResult>()).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (battle.IsEnemiesTurn && firstRender)
        {
            await Play();
            StateHasChanged();
        }
    }

    private async Task Shoot(BattleGroup group)
    {
        var attackResults = shipAttack.MakeAttack(group, battle.GetEnemyFirstActiveShip).ToList();
        var selectedGroup = battle.Groups.First(x => x.Index == group.Index);
        results[group.Index] = attackResults.ToList();
        message = $"You shoots {attackResults.Strikes()}";

        if (!battle.IsEnded)
        {
            battle.NextTurn();
            if (battle.IsEnemiesTurn)
            {
                await Play();
            }
        }
    }

    private void Retreat(BattleGroup group)
    {

    }

    private void ShipClicked(Ship ship)
    {
        selectedShip = ship;
        overlayPanel.Show();
    }

    private async Task Play()
    {
        loading = true;
        while (battle.IsEnemiesTurn)
        {
            var activeGroup = battle.ActiveGroup;
            if (activeGroup is not null)
            {
                var attackResults = shipAttack.MakeAttack(activeGroup, battle.GetPlayersWeakestShip).ToList();
                var selectedGroup = battle.EnemyGroups.First(x => x.Index == activeGroup.Index);
                enemyResults[selectedGroup.Index] = attackResults.ToList();
                message = $"{activeGroup.ToString()} shoots {attackResults.Strikes()}";
                battle.NextTurn();
            }

            await Task.Delay(1000);
        }
        loading = false;
    }
}